const express = require('express');
const router = express.Router();
const { pool } = require('./database');
const auth = require('./auth');

// 현재 사용자 정보 조회
router.get('/me', auth.authenticateToken, async (req, res) => {
    try {
        const result = await pool.query(
            'SELECT id, email, name, username, profile_image, subscription_type, language, created_at FROM users WHERE id = $1',
            [req.user.userId]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: '사용자를 찾을 수 없습니다.'
            });
        }
        
        res.json({
            success: true,
            data: result.rows[0]
        });
    } catch (error) {
        console.error('User fetch error:', error);
        res.status(500).json({
            success: false,
            message: '사용자 정보를 불러오는데 실패했습니다.'
        });
    }
});

// 사용자 프로필 업데이트
router.patch('/me', auth.authenticateToken, async (req, res) => {
    try {
        const { name, username, profile_image, language } = req.body;
        
        const result = await pool.query(
            'UPDATE users SET name = COALESCE($1, name), username = COALESCE($2, username), profile_image = COALESCE($3, profile_image), language = COALESCE($4, language), updated_at = NOW() WHERE id = $5 RETURNING *',
            [name, username, profile_image, language, req.user.userId]
        );
        
        delete result.rows[0].password_hash;
        
        res.json({
            success: true,
            data: result.rows[0],
            message: '프로필이 업데이트되었습니다.'
        });
    } catch (error) {
        console.error('Profile update error:', error);
        res.status(500).json({
            success: false,
            message: '프로필 업데이트에 실패했습니다.'
        });
    }
});

// 사용자 설정 조회
router.get('/me/settings', auth.authenticateToken, async (req, res) => {
    try {
        const result = await pool.query(
            'SELECT * FROM user_settings WHERE user_id = $1',
            [req.user.userId]
        );
        
        if (result.rows.length === 0) {
            // 기본 설정 생성
            const newSettings = await pool.query(
                'INSERT INTO user_settings (user_id) VALUES ($1) RETURNING *',
                [req.user.userId]
            );
            
            return res.json({
                success: true,
                data: newSettings.rows[0]
            });
        }
        
        res.json({
            success: true,
            data: result.rows[0]
        });
    } catch (error) {
        console.error('Settings fetch error:', error);
        res.status(500).json({
            success: false,
            message: '설정을 불러오는데 실패했습니다.'
        });
    }
});

// 사용자 설정 업데이트
router.patch('/me/settings', auth.authenticateToken, async (req, res) => {
    try {
        const settings = req.body;
        
        const result = await pool.query(
            `UPDATE user_settings 
             SET notification_email = COALESCE($1, notification_email),
                 notification_push = COALESCE($2, notification_push),
                 theme = COALESCE($3, theme),
                 language = COALESCE($4, language),
                 settings = COALESCE($5, settings)
             WHERE user_id = $6 
             RETURNING *`,
            [settings.notification_email, 
             settings.notification_push, 
             settings.theme,
             settings.language, 
             JSON.stringify(settings.extra || {}), 
             req.user.userId]
        );
        
        res.json({
            success: true,
            data: result.rows[0],
            message: '설정이 업데이트되었습니다.'
        });
    } catch (error) {
        console.error('Settings update error:', error);
        res.status(500).json({
            success: false,
            message: '설정 업데이트에 실패했습니다.'
        });
    }
});

module.exports = router;
